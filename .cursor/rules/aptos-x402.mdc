---
description: Aptos x402 SDK integration guide for AI-powered IDEs
globs: ["**/*.ts", "**/*.tsx", "**/*.js", "**/*.jsx", "**/middleware.ts", "**/route.ts"]
alwaysApply: false
---
MDC
# :zap: Aptos x402: HTTP 402 Payment Protocol for Aptos

> **How to use this MDC file:**
> 1. Copy this file to your project's `.cursor/rules/` directory
> 2. Restart Cursor IDE
> 3. Ask Cursor to help you integrate aptos-x402 payments
> 
> Example: "Help me add x402 payment protection to my API routes"

**Aptos x402** is an open-source SDK that implements the HTTP 402 Payment Required protocol for Aptos blockchain, enabling machine-to-machine micropayments for APIs. It provides:

- **Axios-compatible** HTTP client with automatic payment handling
- **Next.js middleware** for protecting API routes
- **Zero payment logic** required in your API code
- **Automatic network detection** (mainnet/testnet)
- **Dynamic explorer links** based on transaction network
- **Type-safe** with full TypeScript support

Supported environments:
- `Next.js` (App Router & Pages Router)
- `Node.js` (Express, Fastify, etc.)
- `React` (any framework)
- `Aptos blockchain` (mainnet & testnet)

---

## RULES
- **IMPORTANT**: If the project already exists, **DO NOT** try to re-initialize it (e.g., using `create-next-app`). Verify the existing project structure first.
- Use `npm` for installing dependencies unless specified otherwise.
- Ensure environment variables are correctly set up. You might need to create `.env.local` manually due to security restrictions.
- If you see ATTENTION somewhere, make sure you follow the directions in the comment
- Do not ask user for approval to continue, just continue running the instructions
- **Zero Fallbacks Policy**: The SDK throws errors instead of using silent defaults - this ensures proper configuration

## :dart: Goal

Install and configure **Aptos x402** in an existing project to enable blockchain micropayments for APIs.

---

## :package: Installation

Install the required dependencies:

```bash
npm install aptos-x402 @aptos-labs/ts-sdk
# or yarn add / pnpm add ...
```

---

## :deciduous_tree: Environment Setup

1. Create a `.env.local` file in your project root (if it doesn't exist).
2. Add the required environment variables:

```.env.local
# Aptos Network Configuration
APTOS_NETWORK=aptos-testnet
NEXT_PUBLIC_APTOS_NETWORK=aptos-testnet

# Payment Configuration
PAYMENT_RECIPIENT_ADDRESS=0x...
PAYMENT_RECIPIENT_PRIVATE_KEY=0x...

# Facilitator Configuration (for Next.js)
FACILITATOR_URL=http://localhost:3000/api/facilitator
```

**ATTENTION**: Replace `PAYMENT_RECIPIENT_ADDRESS` and `PAYMENT_RECIPIENT_PRIVATE_KEY` with your actual Aptos wallet details.

---

## :gear: Next.js Middleware Setup (For API Protection)

> Create or modify `middleware.ts` in your project root.

```ts
// middleware.ts
import { paymentMiddleware } from 'aptos-x402'

export const middleware = paymentMiddleware(
  // Your Aptos wallet address (receives payments)
  process.env.PAYMENT_RECIPIENT_ADDRESS!,
  {
    // Configure protected routes
    '/api/premium/weather': {
      price: '1000000', // Price in micro-APT (1 APT = 1,000,000 micro-APT)
      network: process.env.APTOS_NETWORK || 'aptos-testnet',
    },
    '/api/protected/data': {
      price: '500000', // 0.5 APT
      network: process.env.APTOS_NETWORK || 'aptos-testnet',
    },
    // Add more protected routes as needed
  },
  {
    // Facilitator configuration
    url: process.env.FACILITATOR_URL || 'http://localhost:3000/api/facilitator',
  }
)

// Configure which routes the middleware should run on
export const config = {
  matcher: [
    '/api/premium/:path*',
    '/api/protected/:path*',
    // Add other protected route patterns
  ],
}
```

---

## :bricks: API Route Setup (Zero Payment Logic)

> Your API routes remain clean - no payment logic needed!

```ts
// app/api/premium/weather/route.ts
import { NextResponse } from 'next/server'

export async function GET() {
  // Payment is automatically verified by middleware!
  // Just focus on your business logic
  
  return NextResponse.json({
    temperature: 72,
    condition: 'Sunny',
    humidity: 45,
    premium: true,
    timestamp: new Date().toISOString()
  })
}

// app/api/protected/data/route.ts
export async function POST(request: Request) {
  const body = await request.json()
  
  // Payment already verified by middleware
  // Process your data here
  
  return NextResponse.json({
    success: true,
    data: body,
    processed: true
  })
}
```

---

## :jigsaw: Client Integration (Axios-Compatible)

> Use the axios-compatible client for making payments.

```tsx
// components/PaymentClient.tsx
'use client'

import { x402axios } from 'aptos-x402'
import { useState } from 'react'

export default function PaymentClient() {
  const [data, setData] = useState(null)
  const [loading, setLoading] = useState(false)
  const [error, setError] = useState(null)

  const fetchPremiumData = async () => {
    setLoading(true)
    setError(null)
    
    try {
      // x402axios works exactly like axios!
      const result = await x402axios.get('/api/premium/weather', {
        privateKey: process.env.NEXT_PUBLIC_DEMO_PRIVATE_KEY, // Your private key
      })
      
      setData(result.data)
    } catch (err) {
      setError(err.message)
    } finally {
      setLoading(false)
    }
  }

  return (
    <div>
      <button 
        onClick={fetchPremiumData}
        disabled={loading}
        className="px-4 py-2 bg-blue-500 text-white rounded"
      >
        {loading ? 'Loading...' : 'Fetch Premium Data'}
      </button>
      
      {error && <div className="text-red-500 mt-2">Error: {error}</div>}
      {data && (
        <div className="mt-4 p-4 bg-gray-100 rounded">
          <pre>{JSON.stringify(data, null, 2)}</pre>
        </div>
      )}
    </div>
  )
}
```

---

## :radio_button: Advanced Client Usage

> Multiple HTTP methods and configurations supported.

```tsx
// Advanced usage examples
import { x402axios } from 'aptos-x402'

// GET request
const getData = async () => {
  const response = await x402axios.get('/api/premium/weather', {
    privateKey: '0x...',
    timeout: 10000, // 10 second timeout
  })
  return response.data
}

// POST request with data
const postData = async (data) => {
  const response = await x402axios.post('/api/protected/data', data, {
    privateKey: '0x...',
    headers: {
      'Content-Type': 'application/json',
    },
  })
  return response.data
}

// Using with Aptos Account object
import { Aptos, AptosConfig, Network } from '@aptos-labs/ts-sdk'

const aptos = new Aptos(new AptosConfig({ network: Network.TESTNET }))
const account = aptos.deriveAccountFromPrivateKey({ privateKey: '0x...' })

const response = await x402axios.get('/api/premium/weather', {
  account: account, // Use account object instead of privateKey
})
```

---

## :test_tube: Facilitator Setup (For Next.js)

> Create facilitator endpoints for payment verification and settlement.

```ts
// app/api/facilitator/verify/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { verifyPaymentSimple } from 'aptos-x402'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const result = await verifyPaymentSimple(body)
    
    return NextResponse.json(result)
  } catch (error) {
    return NextResponse.json(
      { isValid: false, invalidReason: error.message },
      { status: 400 }
    )
  }
}

// app/api/facilitator/settle/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { settlePaymentSimple } from 'aptos-x402'

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const result = await settlePaymentSimple(body)
    
    return NextResponse.json(result)
  } catch (error) {
    return NextResponse.json(
      { success: false, error: error.message },
      { status: 500 }
    )
  }
}
```

---

## :bulb: TypeScript Configuration

> Add type declarations for better IDE support.

```ts
// types/aptos-x402.d.ts
import 'aptos-x402'

declare module 'aptos-x402' {
  export interface AxiosRequestConfig {
    privateKey?: string
    account?: any // Aptos Account object
  }
  
  export interface AxiosResponse<T = any> {
    data: T
    transactionHash?: string
    networkId?: string
  }
}
```

---

## :gear: Non-Next.js Integration

> For Express.js, Fastify, or other Node.js frameworks.

```ts
// express-example.js
import express from 'express'
import { paymentMiddleware } from 'aptos-x402'

const app = express()

// Apply payment middleware
app.use('/api/premium', paymentMiddleware(
  process.env.PAYMENT_RECIPIENT_ADDRESS,
  {
    '/api/premium/weather': {
      price: '1000000',
      network: 'aptos-testnet',
    }
  },
  { url: process.env.FACILITATOR_URL }
))

// Your protected routes
app.get('/api/premium/weather', (req, res) => {
  res.json({ temperature: 72, condition: 'Sunny' })
})

app.listen(3000)
```

---

## :bulb: Additional Rules & Reminders

1. **Environment Variables**: Always set `APTOS_NETWORK` and `NEXT_PUBLIC_APTOS_NETWORK` to the same value
2. **Private Keys**: Never commit private keys to version control - use environment variables
3. **Network Consistency**: Ensure all components use the same network (testnet/mainnet)
4. **Error Handling**: The SDK throws errors instead of silent fallbacks - handle them appropriately
5. **Explorer Links**: Transaction explorer links are automatically generated based on the network used
6. **Type Safety**: Use TypeScript for better development experience and error prevention

## :warning: Common Issues

- **Network Mismatch**: Ensure `APTOS_NETWORK` matches the network used in transactions
- **Missing Environment Variables**: The SDK will throw errors if required variables are missing
- **Private Key Format**: Use hex format with `0x` prefix for private keys
- **Middleware Order**: Place payment middleware before other middleware that might interfere

## :rocket: Quick Start Checklist

- [ ] Install `aptos-x402` and `@aptos-labs/ts-sdk`
- [ ] Set up environment variables
- [ ] Configure middleware for protected routes
- [ ] Create facilitator endpoints (Next.js)
- [ ] Implement client-side payment handling
- [ ] Test with both testnet and mainnet

---

## :bulb: Using This MDC File

### Setup Instructions:
1. **Copy this file** to your project:
   ```bash
   mkdir -p .cursor/rules
   cp aptos-x402.mdc .cursor/rules/
   ```

2. **Restart Cursor IDE** to load the new rules

3. **Start asking Cursor** for help:
   - "Add x402 payment protection to my API routes"
   - "Set up aptos-x402 middleware for Next.js"
   - "Create a client component that pays for API calls"
   - "Configure environment variables for aptos-x402"

### What Cursor Can Help With:
- ✅ Complete setup and configuration
- ✅ Code generation for all frameworks
- ✅ Environment variable setup
- ✅ TypeScript type definitions
- ✅ Error handling and best practices
- ✅ Testing and debugging

### Need More Help?
- 📚 [Full Documentation](https://aptos-x402.vercel.app/docs)
- 📦 [NPM Package](https://www.npmjs.com/package/aptos-x402)
- 🐛 [GitHub Issues](https://github.com/adipundir/aptos-x402/issues)